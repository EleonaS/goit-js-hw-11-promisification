{"version":3,"sources":["js/task1.js","js/task2.js","js/task3.js","index.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","reject","id","logSuccess","logError","warn","amount","catch"],"mappings":";AAEA,MAAMA,EAAQC,GACH,IAAIC,QAAQC,IAChBC,WAAW,IAAID,EAAQF,GAAKA,KAG7BI,EAASC,GAAQC,QAAQC,sBAAsBF,OAGrDN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ;;ACVjB,MAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,CAACC,EAAUC,IACxB,IAAIb,QAAQC,IAEfA,EADqBW,EAASE,IAAIC,GAAQA,EAAKN,OAASI,EAAW,IAAKE,EAAML,QAASK,EAAKL,QAAWK,MAKzGZ,EAASa,GAAgBX,QAAQY,MAAMD,GAE7CL,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ;;ACjBnC,MAAMe,EAA4B,CAACC,EAAKC,IAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAkBC,IACd3B,MAAAA,EAAQoB,EAA0B,IAAK,KACtC,OAAA,IAAIlB,QAAQ,CAACC,EAASyB,KACVL,KAAKE,SACpBrB,WAAW,KACYmB,KAAKE,SAAW,GAEnCtB,EAAQ,CAAE0B,GAAIF,EAAYE,GAAIvB,KAAMN,IAEhC4B,EAAOD,EAAYE,KAExB7B,MAIL8B,EAAa,EAAGD,GAAAA,EAAIvB,KAAAA,MACxBC,QAAQC,mBAAmBqB,kBAAmBvB,SAG1CyB,EAAWF,IACftB,QAAQyB,qCAAqCH,+BAG/CH,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAMH,GAChEL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAMH,GAChEL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,KAAMxB,KAAKqB,GAAYI,MAAMH,GAC/DL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAMH;;AC9BhE,aAFA,QAAA,cACA,QAAA,cACA,QAAA","file":"src.dd00fb32.js","sourceRoot":"../src","sourcesContent":["// Напиши функцию delay(ms), которая возвращает промис, переходящий в состояние \"resolved\" через ms миллисекунд. Значением исполнившегося промиса должно быть то кол-во миллисекунд которое передали во время вызова функции delay.\n\nconst delay = ms => {\n    return new Promise(resolve => {\n       setTimeout(()=>resolve(ms), ms)\n   })\n }\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms\n\n\n\n\n\n\n\n\n","//Перепиши функцию toggleUserState() так, чтобы она не использовала callback-функцию callback, а принимала всего два параметра allUsers и userName и возвращала промис.\n\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName) => {\n    return new Promise(resolve => {\n        const updatedUsers = allUsers.map(user => user.name === userName ? { ...user, active: !user.active } : user);\n        resolve(updatedUsers);\n    })\n};\n\nconst logger = updatedUsers => console.table(updatedUsers);\n\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger);","//Перепиши функцию makeTransaction() так, чтобы она не использовала callback-функции onSuccess и onError, а принимала всего один параметр transaction и возвращала промис.\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = transaction => {\n    const delay = randomIntegerFromInterval(200, 500);\n    return new Promise((resolve, reject) => {\n        const passed = Math.random() > 0.5;\n        setTimeout(() => {\n            const canProcess = Math.random() > 0.3;\n          if (canProcess) {\n            resolve({ id: transaction.id, time: delay });\n            } else {\n                reject(transaction.id);\n            }\n        }, delay);\n    })\n}\n\nconst logSuccess = ({ id, time }) => {\n  console.log(`Transaction ${id} processed in ${time} ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);","import './js/task1';\nimport './js/task2';\nimport './js/task3';"]}